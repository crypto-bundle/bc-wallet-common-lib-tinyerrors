// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameApiClient is the client API for GameApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameApiClient interface {
	StartMatch(ctx context.Context, in *StartMatchRequest, opts ...grpc.CallOption) (*StartMatchResponse, error)
	StopMatch(ctx context.Context, in *StartMatchRequest, opts ...grpc.CallOption) (*StartMatchResponse, error)
	MakeMove(ctx context.Context, in *MakeMoveRequest, opts ...grpc.CallOption) (*MakeMoveResponse, error)
	GetMathStatus(ctx context.Context, in *MatchStatusRequest, opts ...grpc.CallOption) (*MatchStatusResponse, error)
	GetMathList(ctx context.Context, in *MathListRequest, opts ...grpc.CallOption) (*MathListResponse, error)
}

type gameApiClient struct {
	cc grpc.ClientConnInterface
}

func NewGameApiClient(cc grpc.ClientConnInterface) GameApiClient {
	return &gameApiClient{cc}
}

func (c *gameApiClient) StartMatch(ctx context.Context, in *StartMatchRequest, opts ...grpc.CallOption) (*StartMatchResponse, error) {
	out := new(StartMatchResponse)
	err := c.cc.Invoke(ctx, "/pb.GameApi/StartMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameApiClient) StopMatch(ctx context.Context, in *StartMatchRequest, opts ...grpc.CallOption) (*StartMatchResponse, error) {
	out := new(StartMatchResponse)
	err := c.cc.Invoke(ctx, "/pb.GameApi/StopMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameApiClient) MakeMove(ctx context.Context, in *MakeMoveRequest, opts ...grpc.CallOption) (*MakeMoveResponse, error) {
	out := new(MakeMoveResponse)
	err := c.cc.Invoke(ctx, "/pb.GameApi/MakeMove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameApiClient) GetMathStatus(ctx context.Context, in *MatchStatusRequest, opts ...grpc.CallOption) (*MatchStatusResponse, error) {
	out := new(MatchStatusResponse)
	err := c.cc.Invoke(ctx, "/pb.GameApi/GetMathStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameApiClient) GetMathList(ctx context.Context, in *MathListRequest, opts ...grpc.CallOption) (*MathListResponse, error) {
	out := new(MathListResponse)
	err := c.cc.Invoke(ctx, "/pb.GameApi/GetMathList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameApiServer is the server API for GameApi service.
// All implementations must embed UnimplementedGameApiServer
// for forward compatibility
type GameApiServer interface {
	StartMatch(context.Context, *StartMatchRequest) (*StartMatchResponse, error)
	StopMatch(context.Context, *StartMatchRequest) (*StartMatchResponse, error)
	MakeMove(context.Context, *MakeMoveRequest) (*MakeMoveResponse, error)
	GetMathStatus(context.Context, *MatchStatusRequest) (*MatchStatusResponse, error)
	GetMathList(context.Context, *MathListRequest) (*MathListResponse, error)
	mustEmbedUnimplementedGameApiServer()
}

// UnimplementedGameApiServer must be embedded to have forward compatible implementations.
type UnimplementedGameApiServer struct {
}

func (UnimplementedGameApiServer) StartMatch(context.Context, *StartMatchRequest) (*StartMatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartMatch not implemented")
}
func (UnimplementedGameApiServer) StopMatch(context.Context, *StartMatchRequest) (*StartMatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopMatch not implemented")
}
func (UnimplementedGameApiServer) MakeMove(context.Context, *MakeMoveRequest) (*MakeMoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeMove not implemented")
}
func (UnimplementedGameApiServer) GetMathStatus(context.Context, *MatchStatusRequest) (*MatchStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMathStatus not implemented")
}
func (UnimplementedGameApiServer) GetMathList(context.Context, *MathListRequest) (*MathListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMathList not implemented")
}
func (UnimplementedGameApiServer) mustEmbedUnimplementedGameApiServer() {}

// UnsafeGameApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameApiServer will
// result in compilation errors.
type UnsafeGameApiServer interface {
	mustEmbedUnimplementedGameApiServer()
}

func RegisterGameApiServer(s grpc.ServiceRegistrar, srv GameApiServer) {
	s.RegisterService(&GameApi_ServiceDesc, srv)
}

func _GameApi_StartMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameApiServer).StartMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameApi/StartMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameApiServer).StartMatch(ctx, req.(*StartMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameApi_StopMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameApiServer).StopMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameApi/StopMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameApiServer).StopMatch(ctx, req.(*StartMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameApi_MakeMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeMoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameApiServer).MakeMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameApi/MakeMove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameApiServer).MakeMove(ctx, req.(*MakeMoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameApi_GetMathStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameApiServer).GetMathStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameApi/GetMathStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameApiServer).GetMathStatus(ctx, req.(*MatchStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameApi_GetMathList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MathListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameApiServer).GetMathList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GameApi/GetMathList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameApiServer).GetMathList(ctx, req.(*MathListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameApi_ServiceDesc is the grpc.ServiceDesc for GameApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GameApi",
	HandlerType: (*GameApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartMatch",
			Handler:    _GameApi_StartMatch_Handler,
		},
		{
			MethodName: "StopMatch",
			Handler:    _GameApi_StopMatch_Handler,
		},
		{
			MethodName: "MakeMove",
			Handler:    _GameApi_MakeMove_Handler,
		},
		{
			MethodName: "GetMathStatus",
			Handler:    _GameApi_GetMathStatus_Handler,
		},
		{
			MethodName: "GetMathList",
			Handler:    _GameApi_GetMathList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
